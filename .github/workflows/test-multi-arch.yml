name: Test Multi-Architecture Build

on:
  workflow_dispatch:
    inputs:
      test_architecture:
        description: 'Select architecture to test'
        required: true
        default: 'arm64'
        type: choice
        options:
        - arm32
        - arm64
        - x64
        - universal
        - all

env:
  FLUTTER_VERSION: '3.29.3'
  JAVA_VERSION: '17'

jobs:
  test-single-arch:
    name: Test Single Architecture Build
    runs-on: ubuntu-latest
    if: github.event.inputs.test_architecture != 'all'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Generate version number
        id: version
        run: |
          ./.github/scripts/version-generator.sh

      - name: Update version in pubspec.yaml
        run: |
          sed -i "s/^version: .*/version: ${{ steps.version.outputs.version }}+${{ steps.version.outputs.build-number }}/" pubspec.yaml
          grep "^version:" pubspec.yaml

      - name: Test Build (${{ github.event.inputs.test_architecture }})
        run: |
          ARCH="${{ github.event.inputs.test_architecture }}"
          echo "🧪 测试构建 ${ARCH} 架构..."
          
          case "${ARCH}" in
            "arm32")
              echo "📱 构建ARM32版本"
              flutter build apk --debug --target-platform=android-arm --build-number=${{ steps.version.outputs.build-number }}
              ;;
            "arm64")
              echo "📱 构建ARM64版本"
              flutter build apk --debug --target-platform=android-arm64 --build-number=${{ steps.version.outputs.build-number }}
              ;;
            "x64")
              echo "💻 构建x64版本"
              flutter build apk --debug --target-platform=android-x64 --build-number=${{ steps.version.outputs.build-number }}
              ;;
            "universal")
              echo "🌍 构建通用版本"
              flutter build apk --debug --build-number=${{ steps.version.outputs.build-number }}
              ;;
          esac
          
          echo "✅ 构建完成！"
          echo "📊 APK信息："
          ls -la build/app/outputs/flutter-apk/
          du -h build/app/outputs/flutter-apk/app-debug.apk

  test-all-arch:
    name: Test All Architectures Build
    runs-on: ubuntu-latest
    if: github.event.inputs.test_architecture == 'all'
    strategy:
      matrix:
        include:
          - arch: "arm32"
            target-platform: "android-arm"
            abi: "armeabi-v7a"
          - arch: "arm64"
            target-platform: "android-arm64"
            abi: "arm64-v8a"
          - arch: "x64"
            target-platform: "android-x64"
            abi: "x86_64"
          - arch: "universal"
            target-platform: ""
            abi: "all"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Generate version number
        id: version
        run: |
          ./.github/scripts/version-generator.sh

      - name: Update version in pubspec.yaml
        run: |
          sed -i "s/^version: .*/version: ${{ steps.version.outputs.version }}+${{ steps.version.outputs.build-number }}/" pubspec.yaml

      - name: Test Build (${{ matrix.arch }})
        run: |
          echo "🧪 测试构建 ${{ matrix.arch }} 架构 (${{ matrix.abi }})..."
          
          if [ "${{ matrix.arch }}" = "universal" ]; then
            echo "🌍 构建通用版本（包含所有架构）"
            flutter build apk --debug --build-number=${{ steps.version.outputs.build-number }}
          else
            echo "🎯 构建 ${{ matrix.arch }} 特定架构"
            flutter build apk --debug \
              --target-platform=${{ matrix.target-platform }} \
              --build-number=${{ steps.version.outputs.build-number }}
          fi
          
          # 重命名APK以便区分
          APK_NAME="app-debug-${{ matrix.arch }}.apk"
          mv build/app/outputs/flutter-apk/app-debug.apk "build/app/outputs/flutter-apk/${APK_NAME}"
          
          echo "✅ ${{ matrix.arch }} 构建完成！"
          echo "📊 APK信息："
          echo "文件名: ${APK_NAME}"
          echo "大小: $(du -h build/app/outputs/flutter-apk/${APK_NAME} | cut -f1)"
          echo "架构: ${{ matrix.abi }}"

      - name: Upload test APK
        uses: actions/upload-artifact@v4
        with:
          name: test-apk-${{ matrix.arch }}
          path: build/app/outputs/flutter-apk/app-debug-${{ matrix.arch }}.apk
          retention-days: 7

  summary:
    name: Build Test Summary
    runs-on: ubuntu-latest
    needs: [test-single-arch, test-all-arch]
    if: always()
    
    steps:
      - name: Test Results Summary
        run: |
          echo "🎉 多架构构建测试完成！"
          echo ""
          echo "📊 测试结果："
          
          if [ "${{ github.event.inputs.test_architecture }}" = "all" ]; then
            echo "✅ 测试了所有4种架构：ARM32, ARM64, x64, Universal"
            echo "📦 生成的APK可在Artifacts中下载查看体积差异"
          else
            echo "✅ 测试了 ${{ github.event.inputs.test_architecture }} 架构"
          fi
          
          echo ""
          echo "💡 提示："
          echo "- ARM64版本适用于大多数现代Android设备"
          echo "- ARM32版本适用于较老的32位设备"
          echo "- x64版本适用于模拟器和x86架构设备"
          echo "- Universal版本兼容所有架构但体积最大"