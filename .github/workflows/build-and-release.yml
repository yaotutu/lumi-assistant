name: Build and Release Android APK

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force create release even for PR'
        required: false
        default: false
        type: boolean

# 添加必要的权限以创建Release
permissions:
  contents: write
  actions: read
  checks: write
  issues: read
  packages: write
  pull-requests: write
  repository-projects: read
  security-events: write
  statuses: write

env:
  FLUTTER_VERSION: '3.29.3'
  JAVA_VERSION: '17'

jobs:
  # 代码质量检查
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Analyze code
        run: flutter analyze

      - name: Run tests
        run: flutter test
        continue-on-error: true  # 测试失败不阻断构建，因为是开发阶段

  # Android APK 构建 - 多架构支持
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        include:
          - arch: "arm32"
            target-platform: "android-arm"
            abi: "armeabi-v7a"
            suffix: "arm32"
          - arch: "arm64"
            target-platform: "android-arm64"
            abi: "arm64-v8a"
            suffix: "arm64"
          - arch: "x64"
            target-platform: "android-x64"
            abi: "x86_64"
            suffix: "x64"
          - arch: "universal"
            target-platform: ""
            abi: "all"
            suffix: "universal"
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-number: ${{ steps.version.outputs.build-number }}
      apk-paths: ${{ steps.build.outputs.apk-paths }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史以便计算版本号

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Generate version number
        id: version
        run: |
          # 使用版本生成脚本
          ./.github/scripts/version-generator.sh
          
          echo "📋 版本信息已生成"

      - name: Update version in pubspec.yaml
        run: |
          # 更新pubspec.yaml中的版本号
          sed -i "s/^version: .*/version: ${{ steps.version.outputs.version }}+${{ steps.version.outputs.build-number }}/" pubspec.yaml
          
          echo "📝 更新后的版本信息："
          grep "^version:" pubspec.yaml

      - name: Build Android APK (${{ matrix.arch }})
        id: build
        run: |
          echo "🔨 构建 ${{ matrix.arch }} 架构的APK..."
          
          # 确定构建类型和分支后缀
          BRANCH_NAME="${{ github.ref_name }}"
          if [ "${BRANCH_NAME}" = "main" ]; then
            BUILD_TYPE="release"
            BRANCH_SUFFIX=""
            echo "📦 构建正式Release版本（main分支）"
          elif [ "${BRANCH_NAME}" = "dev" ]; then
            BUILD_TYPE="release"
            BRANCH_SUFFIX="-dev"
            echo "🧪 构建内测Release版本（dev分支）- 正式包用于内测"
          else
            BUILD_TYPE="debug"
            BRANCH_SUFFIX="-${BRANCH_NAME}"
            echo "🔧 构建调试版本（${BRANCH_NAME}分支）"
          fi
          
          # 根据架构和构建类型选择构建命令
          if [ "${{ matrix.arch }}" = "universal" ]; then
            # 构建通用版本（包含所有架构）
            echo "🌍 构建通用版本APK（包含所有架构）"
            if [ "${BUILD_TYPE}" = "release" ]; then
              flutter build apk --release --build-number=${{ steps.version.outputs.build-number }}
              SOURCE_APK="app-release.apk"
            else
              flutter build apk --debug --build-number=${{ steps.version.outputs.build-number }}
              SOURCE_APK="app-debug.apk"
            fi
          else
            # 构建特定架构版本
            echo "🎯 构建 ${{ matrix.arch }} 特定架构APK（体积更小）"
            if [ "${BUILD_TYPE}" = "release" ]; then
              flutter build apk --release \
                --target-platform=${{ matrix.target-platform }} \
                --build-number=${{ steps.version.outputs.build-number }}
              SOURCE_APK="app-release.apk"
            else
              flutter build apk --debug \
                --target-platform=${{ matrix.target-platform }} \
                --build-number=${{ steps.version.outputs.build-number }}
              SOURCE_APK="app-debug.apk"
            fi
          fi
          
          # 生成最终APK文件名
          APK_NAME="lumi-assistant-${{ steps.version.outputs.version }}-${{ matrix.suffix }}${BRANCH_SUFFIX}.apk"
          cp "build/app/outputs/flutter-apk/${SOURCE_APK}" "build/app/outputs/flutter-apk/${APK_NAME}"
          
          # 输出APK信息
          echo "apk-name=${APK_NAME}" >> $GITHUB_OUTPUT
          echo "apk-path=build/app/outputs/flutter-apk/${APK_NAME}" >> $GITHUB_OUTPUT
          echo "architecture=${{ matrix.arch }}" >> $GITHUB_OUTPUT
          echo "build-type=${BUILD_TYPE}" >> $GITHUB_OUTPUT
          echo "branch-suffix=${BRANCH_SUFFIX}" >> $GITHUB_OUTPUT
          
          # 显示构建结果
          echo "🚀 ${{ matrix.arch }} 架构构建完成："
          echo "APK文件: ${APK_NAME}"
          echo "架构: ${{ matrix.abi }}"
          echo "构建类型: ${BUILD_TYPE}"
          echo "分支: ${BRANCH_NAME}${BRANCH_SUFFIX}"
          echo "文件大小: $(du -h build/app/outputs/flutter-apk/${APK_NAME} | cut -f1)"
          ls -la build/app/outputs/flutter-apk/

      - name: Upload APK artifact (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-${{ matrix.arch }}-${{ steps.version.outputs.version }}
          path: ${{ steps.build.outputs.apk-path }}
          retention-days: 30

  # 发布Release（仅在main分支）
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-android
    if: |
      ((github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.force_release == 'true')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all APK artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: android-apk-*-${{ needs.build-android.outputs.version }}
          path: ./artifacts
          merge-multiple: true

      - name: Get latest commit info
        id: commit
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)
          COMMIT_MSG=$(git log -1 --pretty=format:'%s')
          COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
          COMMIT_DATE=$(git log -1 --pretty=format:'%ci')
          
          echo "sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "message=${COMMIT_MSG}" >> $GITHUB_OUTPUT
          echo "author=${COMMIT_AUTHOR}" >> $GITHUB_OUTPUT
          echo "date=${COMMIT_DATE}" >> $GITHUB_OUTPUT

      - name: Generate Auto Changelog
        env:
          VERSION: ${{ needs.build-android.outputs.version }}
          BUILD_NUMBER: ${{ needs.build-android.outputs.build-number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          # 使用自动化变更日志生成脚本
          ./.github/scripts/auto-changelog.sh
          
          echo "📋 自动化变更日志已生成"

      - name: Delete existing tag if exists
        continue-on-error: true
        run: |
          # 删除可能存在的同名tag和release，确保创建新的
          TAG_NAME="v${{ needs.build-android.outputs.version }}"
          
          # 尝试删除远程tag
          git push --delete origin ${TAG_NAME} 2>/dev/null || echo "Tag ${TAG_NAME} 不存在或已删除"
          
          # 尝试删除本地tag
          git tag -d ${TAG_NAME} 2>/dev/null || echo "本地tag ${TAG_NAME} 不存在"
          
          echo "✅ 清理完成，准备创建新的Release"

      - name: Determine release type and file names
        id: release-info
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          VERSION="${{ needs.build-android.outputs.version }}"
          
          if [ "${BRANCH_NAME}" = "main" ]; then
            BRANCH_SUFFIX=""
            PRERELEASE="false"
            RELEASE_TYPE="🚀 Release"
            echo "📦 创建正式Release版本"
          elif [ "${BRANCH_NAME}" = "dev" ]; then
            BRANCH_SUFFIX="-dev"
            PRERELEASE="true"
            RELEASE_TYPE="🧪 Development"
            echo "🧪 创建开发测试版本"
          else
            BRANCH_SUFFIX="-${BRANCH_NAME}"
            PRERELEASE="true"
            RELEASE_TYPE="🔧 Branch Build"
            echo "🔧 创建分支构建版本"
          fi
          
          echo "branch-suffix=${BRANCH_SUFFIX}" >> $GITHUB_OUTPUT
          echo "prerelease=${PRERELEASE}" >> $GITHUB_OUTPUT
          echo "release-type=${RELEASE_TYPE}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create Release with Auto Changelog
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.release-info.outputs.version }}
          name: ${{ steps.release-info.outputs.release-type }} ${{ steps.release-info.outputs.version }}
          body_path: release_notes.md  # 使用自动生成的变更日志
          draft: false
          prerelease: ${{ steps.release-info.outputs.prerelease }}
          make_latest: ${{ github.ref_name == 'main' }}  # 只有main分支设为最新版本
          files: |
            ./artifacts/lumi-assistant-${{ steps.release-info.outputs.version }}-arm32${{ steps.release-info.outputs.branch-suffix }}.apk
            ./artifacts/lumi-assistant-${{ steps.release-info.outputs.version }}-arm64${{ steps.release-info.outputs.branch-suffix }}.apk
            ./artifacts/lumi-assistant-${{ steps.release-info.outputs.version }}-x64${{ steps.release-info.outputs.branch-suffix }}.apk
            ./artifacts/lumi-assistant-${{ steps.release-info.outputs.version }}-universal${{ steps.release-info.outputs.branch-suffix }}.apk
          token: ${{ secrets.GITHUB_TOKEN }}

  # 通知工作流结果
  notify:
    name: Notify Build Result
    runs-on: ubuntu-latest
    needs: [code-quality, build-android, release]
    if: always()
    
    steps:
      - name: Build Success Notification
        if: needs.build-android.result == 'success'
        run: |
          echo "✅ 构建成功！"
          echo "版本: ${{ needs.build-android.outputs.version }}"
          echo "构建号: ${{ needs.build-android.outputs.build-number }}"
          
      - name: Build Failure Notification
        if: needs.build-android.result == 'failure'
        run: |
          echo "❌ 构建失败！请检查日志。"
          exit 1

      - name: Release Success Notification
        if: needs.release.result == 'success'
        run: |
          echo "🎉 Release发布成功！"
          echo "可在GitHub Releases页面下载APK文件"
          
      - name: Release Skipped Notification
        if: needs.release.result == 'skipped'
        run: |
          echo "ℹ️ Release被跳过（非main分支推送）"